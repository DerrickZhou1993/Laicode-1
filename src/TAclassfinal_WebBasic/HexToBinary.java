package TAclassfinal_WebBasic;

import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;

public class HexToBinary {
	// 3F
	// 3 * 16 ^ 1 + 15 * 16 ^ 0
	// 48 + 15 = 63
	/*
	 * basic idea:
	 * 		transform hexdecimal number to decimal and 
	 *		then binary
	 */
	public static List<Long> hexToBinary(String s) {
		if (s == null || s.length() == 0) {
			return null;
		}
		char[] arr = s.toCharArray();
		long decimal = 0;
		for (int i = 0; i < arr.length; i++) {
			decimal += toInt(arr[arr.length - 1 - i]) * Math.pow(16, i);
		}
		return toBinaryByStack(decimal);

	}
	/*
	 * HexDecimal character to integer 
	 */
	private static int toInt(char c) {
		if (c >= '0' && c <= '9') {
			return c - '0';
		} else if (c >= 'A' && c <= 'F') {
			return c - 'A' + 10;
		} else if (c >= 'a' && c <= 'f'){
			return c - 'a' + 10;
		} else {
			return -1;
		}
	}
	/*
	 * decimal number to binary number
	 */
	private static String toBinary(long num) {
		StringBuilder res = new StringBuilder();
		while (num > 0) {
			res.append(num % 2);
			num /= 2;
		}
		// binary number is in reverse order
		// need reverse 
		return res.reverse().toString();
	}
	/*
	 * or we could use a stack to automatically reverse order
	 * for binary number generated by decimal number
	 */
	private static List<Long> toBinaryByStack(long num) {
		Deque<Long> stack = new LinkedList<>();
		List<Long> res = new ArrayList<>();
		while (num > 0) {
			stack.push(num % 2);
			num /= 2;
		}
		while (!stack.isEmpty()) {
			res.add(stack.pop());
		}
		return res;
	}

	public static void main(String[] args) {
		String s = "AD32";
		List<Long> res = hexToBinary(s);
		for (Long l : res) {
			System.out.print(l);
		}
		// System.out.println(hexToBinary(s));
	}
}
