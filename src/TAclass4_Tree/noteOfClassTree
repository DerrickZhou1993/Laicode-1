Tree
Q1 Invert binary tree
		4
	   / \
	  2   7                
	 / \ / \
    1  3 6  9
    
    ->
    	4
	   / \
	  7   2                
	 / \ / \
    9  6 3  1
    
Traversal of Tree
	1. preorder
		iteration:
			step1: new a Stack, stack.push(root)
			step2: pop top and print, then push root.right and root.left (for we need to pop root.left before root.right)
			step3: do it until stack is empty
	2. inorder
		iteration:
			step1: new a Stack, initialize cur pointing to root
			step2: as long as cur.left exists, keep pushing left child
			step3: if no left child exists, let cur point to right child
			step4: keep iterating until cur == null || stack is empty
	3. postorder
		sol1: use two stacks
			step1: initialize two stacks(stack1 and stack2), push root into stack1
			step2: pop TreeNode from stack1 and push it into stack2 then push its left and right child into stack1(reverse pushing order of preorder)
			step3: iterate the process until stack1 is empty
		this basic idea is if we push child of root into stack in the reverse order we do it in preorder and then we reverse the whole 
		res(stack2.pop()), we could get postorder traversal of binary tree
		
		TreeNodes pop from stack2 will build the postorder traversal of binary tree
		
		sol2: use one stack

		 * the essence of post order of BST by iteration is the direction
		 * are we going down or going up from left subtree or going up from right subtree?
		 * maintain a previous Node which is the last traversed node in last iteration, to 
		 * record the previous visiting node in the traversing path, so that we know what the 
		 * direction we are taking now and what is the direction we are taking next
		 * 
		 * steps: stack.offer(root)
		 * 		  if prev is null(cur is root)  -> going down(left tree has priority)
		 * 		  if prev is current's parent -> going down(left tree has priority)
		 * 		  if prev is current's left  -> left subtree finished, going current.right if existed,if not existed,pop current and going up
		 * 	      if prev is current's right -> right subtree finished, pop current, going up

    	
    	
    	
Level order traversal
	Level order: queue
	
	zigzag level traversal
	
	
Determine a tree

	Q1 determine if a binary tree is a balanced binary tree
		step1: bottom-up search, record current treenode depth
		step2: determine if it breaks the rule of balanced binary tree (difference of depth > 1)
		step3: return the height to the parent node, if not balanced, return -1
		
	Q2 isBST
		sol:
			step1: maintain current node's valid range (min and max)
			step2: if the current node's value is out of valid range, return false
				   else current node's value will be passed as max limit to left child
				        current node's value will be passed as min limit to right child
			recursively call the function
	
	Q3 complete binary tree
	      1
	     / \
	    2   3
	   / \   \
	  4  5    7
	  
	  basic idea: use level order traversal 
	  	whenever we traverse a treenode
	  		determine if it is a full node (has both left and right child node)
	  	    	if current node is not full, then all the following nodes traversed must be leaf nodes, else return false
	  	    	(if one node has no left child, then it cannot have right child node either, else return false)
	  
	  
	  
 	
	
	
	