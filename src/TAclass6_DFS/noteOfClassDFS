DFS
warm up recursively reverse a string

N queen
	basic idea: dfs
		consider row by row
			on each row, check every position if it is valid to set a queen
					if valid, go next row
					else, check next position
					time = O(n! * n)     isValid() will cost O(n)
 					space = O(n ^ 2)
 					
 3. all subsets 1 without duplicate
 
				       {}
				/           \
1			  {}	          {1}
			 /  \          /       \
2        {}      {2}    {12}        {1}
        /   \   /   \  /     \      / \
3      {} {3} {2} {23} {12} {123} {1} {13} 

Time = O(2 ^ n)
Space = O(n)

3.2 subsets with duplicate 
	basic idea: sort the given array
				use subset 1
				
				
4 All permutation
	swap and swap back
	Time = O(n!)
	Space = O(n)
	
	if contains duplicates, use a hash_set to de-duplicate
	
5. All valid parentheses

	follow up : 
		1. if has multiple types of parentheses
		   use a stack and maintain last added left parenthesis, only new right parenthesis can match
		   last added left one, can we add it 
		2. if parenthesis has priority  {[()]}
		
6 delete half of tree
	delete all nodes which have only one child
			2
		   / \
		  7   5
		   \   \
		   6    9
		  / \  /
		 1  11 4
		 
		 to
		 
		  2
		 / \
		6   4
	   / \ 
	  1   11 
 7 directed graph  