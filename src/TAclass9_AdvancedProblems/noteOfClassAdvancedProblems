Heap:
	java: PriorityQueue
	Heap is represented by array usually in memory
	Be careful of comparator of heap
	
Heapify:
	convert an unordered integer array into a heap array O(n) time
	for a element in heap which index is x:
		left_child index: 2 * x + 1
		right_child index: 2 * x + 2
		parent: x - 1 / 2
		
	how heapify()?:
				for each node that has at least one child, we perform percolateDown() action,
				in the order of from the nodes on the deepest level to the root
				time: O(n)
				
				       10
				    /     \
				  11       7
				 /   \    /  \    
		         2    8    4  6
		        / \
		       13  3
		       
		           percolateDown(2)
		           percolateDown(7)
		           percolateDown(11)
		           percolateDown(10)
		           
		               2
				    /     \
				  3         4
				 /   \    /  \    
		         10    8   7  6
		        / \
		       13  11
		       
		  Essentially:
		  	the range of indices need to perform percolateDown() is [0, n / 2 - 1]
		  	for last element's parent's index:  ((n - 1) - 1) / 2 = (n - 2) / 2 = n / 2 - 1
		           
percolate up:(offer(E e))
	when:
		 the element needs to be moved up to maintain the heap's property, for example
		 when offering a new element into the heap
	how: 
		compare the element with its parent, move it up when necessary. Do this until the
		element does not need to be moved
		
	
		
percolate down: (poll())
	when:
		the elements need to be moved down to maintain the heap's property, for
		example, when poll the root element from the heap
	how:
		compare the element with its two children, if the smallest one of the two
		children is smaller than the element, swap the element with that child. Do this
		until the element does not need to be moved.


bottom-up percolate down to heapify is a better way than top-down O(n)
top-down heapify may result in an element is not extreme one but fixed 
on the top of heap and cannot go down forever


heap-sort:
		1. heapify the array ==> heap array
		2. for loop:
				swap top element to tail of array 
		        percolate down second last element
		   this result in an sorted array
		   
		   
Heap Operation Cost:
	peek():      O(1)
	offer(E e):  O(logn)  
	poll():      O(logn)  actually swap top will tail and pecolate down ==> logn
	remove(E e): O(n)    find e will cost O(n)  => O(N)
	
	
Median Tracker
	void addNum(Integer i)
	double findMedian()
	
BFS2
	Given two ascending arrays, define pair(u, v), it represents choosing an element u from arr1
	and choosing another element v from arr2, and given a number K, find k min sum pairs
	
Top-K
4. Given a non-empty array of integers, return the k most frequent elements
	minHeap of K size ---> online streaming 
	
BFS

Word Ladder

topological sort
	